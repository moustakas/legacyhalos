{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get(path, params=None):\n",
    "    # make HTTP GET request to path\n",
    "    headers = {\"api-key\":\"e74bff8a3f17fa1497eb8c11243b2b87\"}\n",
    "    r = requests.get(path, params=params, headers=headers)\n",
    "\n",
    "    # raise exception if response code is not HTTP SUCCESS (200)\n",
    "    r.raise_for_status()\n",
    "\n",
    "    if r.headers['content-type'] == 'application/json':\n",
    "         return r.json() # parse json responses automatically\n",
    "\n",
    "    if 'content-disposition' in r.headers:\n",
    "        filename = r.headers['content-disposition'].split(\"filename=\")[1]\n",
    "        with open(filename, 'wb') as f:\n",
    "            f.write(r.content)\n",
    "        return filename # return the filename string\n",
    "\n",
    "    return r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/135/subhalos/0/\"\n",
    "r = get(url)\n",
    "r['mass']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "r['halfmassrad_stars']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# first convert log solar masses into group catalog units\n",
    "mass_min = 10**11.9 / 1e10 * 0.704\n",
    "mass_max = 10**12.1 / 1e10 * 0.704"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# form the search_query string by hand for once\n",
    "search_query = \"?mass__gt=\" + str(mass_min) + \"&mass__lt=\" + str(mass_max)\n",
    "search_query"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# form the url and make the request\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=2/subhalos/\" + search_query\n",
    "subhalos = get(url)\n",
    "subhalos['count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids = [subhalos['results'][i]['id'] for i in range(5)]\n",
    "ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids = [1, 1352, 5525, 6574, 12718]\n",
    "for id in ids:\n",
    "    url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=2/subhalos/\" + str(id)\n",
    "    subhalo = get(url)\n",
    "    print(\"ID:\", id, \"Stellar mass:\", subhalo['mass_stars'], \"Num of Stars:\", subhalo['len_stars'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids = [1, 1352, 5525, 6574, 12718]\n",
    "for id in ids:\n",
    "    url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=2/subhalos/\" + str(id) + \"/cutout.hdf5\"\n",
    "    saved_filename = get(url)\n",
    "    print(id, saved_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 1\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params) # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 12718\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params) # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 1352\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params) # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 5525\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params) # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params) # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params).items() and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\",params).items() # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\").items() # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\") # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(p.mean( metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "id = 6574\n",
    "redshift = 2.0\n",
    "params = {'stars:''Coordinates, GFM_Metallicity'}\n",
    "\n",
    "scale_factor = 1.0 / (1+redshift)\n",
    "little_h = 0.704\n",
    "solar_Z = 0.0127\n",
    "\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/z=\" + str(redshift) + \"/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "saved_filename = get(url + \"/cutout.hdf5\") # get and save HDF5 cutout file\n",
    "\n",
    "with h5py.File(saved_filename) as f:\n",
    "    # NOTE! If the subhalo is near the edge of the box, you must take the periodic boundary into account! (we ignore it here)\n",
    "    dx = f['PartType4']['Coordinates'][:,0] - sub['pos_x']\n",
    "    dy = f['PartType4']['Coordinates'][:,1] - sub['pos_y']\n",
    "    dz = f['PartType4']['Coordinates'][:,2] - sub['pos_z']\n",
    "    metals = f['PartType4']['GFM_Metallicity'][:]\n",
    "    \n",
    "    rr = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    rr *= scale_factor/little_h # ckpc/h -> physical kpc\n",
    "    \n",
    "    w = np.where( (rr >= 3.0) & (rr < 5.0) )    \n",
    "    print(np.mean(metals[w] ) / solar_Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "z0_descendant_ids = [-1]*len(ids)\n",
    "\n",
    "for i,id in enumerate(ids):\n",
    "    start_url = \"http://www.tng-project.org/api/Illustris-1/snapshots/68/subhalos/\" + str(id)\n",
    "    sub = get(start_url)\n",
    "    \n",
    "    while sub['desc_sfid'] != -1:\n",
    "        # request the full subhalo details of the descendant by following the sublink URL\n",
    "        sub = get(sub['related']['sublink_descendant'])\n",
    "        if sub['snap'] == 135:\n",
    "            z0_descendant_ids[i] = sub['id']\n",
    "        \n",
    "    if z0_descendant_ids[i] >= 0:\n",
    "        print('Descendant of ' + str(id) + ' at z=0 is ' + str(z0_descendant_ids[i]))\n",
    "    else:\n",
    "        print('Descendant of ' + str(id) + ' not followed to z=0!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "id = 6574\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/68/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "\n",
    "# prepare dict to hold result arrays\n",
    "fields = ['snap','id','mass_gas','mass_stars','mass_dm','mass_bhs']\n",
    "r = {}\n",
    "for field in fields:\n",
    "    r[field] = []\n",
    "\n",
    "while sub['desc_sfind'] != -1:\n",
    "    for field in fields:\n",
    "        r[field].append(sub[field])\n",
    "    # request the full subhalo details of the descendant by following the sublink URL\n",
    "    sub = get(sub['related']['sublink_descendant'])\n",
    "    \n",
    "# make a plot (notice our subhalo falls into a much more massive halo around snapshot 105)\n",
    "for partType in ['gas','dm','stars','bhs']:\n",
    "    mass_logmsun = np.log10( np.array(r['mass_'+partType])*1e10/0.704)\n",
    "    plt.plot(r['snap'],mass_logmsun,label=partType)\n",
    " \n",
    "plt.xlabel('Snapshot Number')\n",
    "plt.ylabel('Mass [log $M_\\odot$]')\n",
    "plt.legend(loc='lower right');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "id = 6574\n",
    "url = \"http://www.tng-project.org/api/Illustris-1/snapshots/68/subhalos/\" + str(id)\n",
    "sub = get(url) # get json response of subhalo properties\n",
    "\n",
    "# prepare dict to hold result arrays\n",
    "fields = ['snap','id','mass_gas','mass_stars','mass_dm','mass_bhs']\n",
    "r = {}\n",
    "for field in fields:\n",
    "    r[field] = []\n",
    "\n",
    "while sub['desc_sfid'] != -1:\n",
    "    for field in fields:\n",
    "        r[field].append(sub[field])\n",
    "    # request the full subhalo details of the descendant by following the sublink URL\n",
    "    sub = get(sub['related']['sublink_descendant'])\n",
    "    \n",
    "# make a plot (notice our subhalo falls into a much more massive halo around snapshot 105)\n",
    "for partType in ['gas','dm','stars','bhs']:\n",
    "    mass_logmsun = np.log10( np.array(r['mass_'+partType])*1e10/0.704)\n",
    "    plt.plot(r['snap'],mass_logmsun,label=partType)\n",
    " \n",
    "plt.xlabel('Snapshot Number')\n",
    "plt.ylabel('Mass [log $M_\\odot$]')\n",
    "plt.legend(loc='lower right');"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
