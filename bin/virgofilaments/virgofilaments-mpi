#!/usr/bin/env python
"""MPI wrapper for the Virgo Filaments project.

virgofilaments-mpi --coadds

"""
import os, time, pdb
import numpy as np

def main():
    """Top-level wrapper.

    """
    import legacyhalos.io
    import legacyhalos.virgofilaments

    from legacypipe.runs import get_survey
    from legacyhalos.virgofilaments import RACOLUMN, DECCOLUMN, GALAXYCOLUMN, DIAMCOLUMN
    from legacyhalos.virgofilaments import get_galaxy_galaxydir
    
    basedir = legacyhalos.io.legacyhalos_dir()
    datadir = legacyhalos.io.legacyhalos_data_dir()
    htmldir = legacyhalos.io.legacyhalos_html_dir()
    
    args = legacyhalos.virgofilaments.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sample, fullsample = None, None
    if rank == 0:
        print('$LEGACYHALOS_DIR={}'.format(basedir))
        print('$LEGACYHALOS_DATA_DIR={}'.format(datadir))
        print('$LEGACYHALOS_HTML_DIR={}'.format(htmldir))

        sample = legacyhalos.virgofilaments.read_sample(
            first=args.first, last=args.last, verbose=args.verbose,
            fullsample=False, galaxylist=args.galaxylist,
            d25min=args.d25min, d25max=args.d25max)
        if len(sample) == 0:
            return

        if args.coadds or args.build_catalog or args.build_refcat:
            refcat = 'R1'
            # For the custom coadds and build_catalog steps we need the full sample, too.
            fullsample = legacyhalos.virgofilaments.read_sample(
                verbose=args.verbose, fullsample=True)
            fullsample = fullsample[np.isin(fullsample['GROUP_ID'], sample['GROUP_ID'])]

            if args.build_catalog:
                sample = sample[np.argsort(sample['GROUP_ID'])] # sort by group_id

    if comm:
        sample = comm.bcast(sample, root=0)
        fullsample = comm.bcast(fullsample, root=0)
    
    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if rank == 0:    
        if args.htmlindex:
            legacyhalos.virgofilaments.make_html(sample, survey=None, pixscale=args.pixscale,
                                                 racolumn=RACOLUMN, deccolumn=DECCOLUMN, diamcolumn=DIAMCOLUMN,
                                                 nproc=args.nproc, clobber=args.clobber,
                                                 makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                                 htmlhome=args.htmlhome, html_raslices=args.html_raslices,
                                                 args=args)
            return

        if args.build_refcat:
            # Build a reference catalog for use with the pipeline. satellites
            # can belong to more than one cluster, so trim to unique IDs.
            
            import fitsio
            from astropy.table import Table
            version = legacyhalos.virgofilaments.get_version()

            ngal = len(fullsample)

            ref = Table()
            ref['ra'] = fullsample['RA']
            ref['dec'] = fullsample['DEC']
            ref['sga_id'] = fullsample['VF_ID']
            ref['mag_leda'] = fullsample['MAG_INIT']
            ref['pa'] = fullsample['PA_INIT']
            ref['ba'] = fullsample['BA_INIT']
            ref['diam'] = fullsample['DIAM_INIT'] # [arcmin]
            assert(np.all(np.isfinite(ref['mag_leda'])))

            reffile = os.path.join(basedir, 'virgofilaments-{}-refcat.fits'.format(version))
            kdreffile = reffile.replace('.fits', '.kd.fits')
            print('Writing {} galaxies to {}'.format(ngal, reffile))

            hdr = fitsio.FITSHDR()
            hdrver = refcat
            hdr['SGAVER'] = hdrver
            fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)

            print('Writing {}'.format(kdreffile))
            cmd = 'startree -i {} -o {} -T -P -k -n stars'.format(reffile, kdreffile)
            print(cmd)
            _ = os.system(cmd)

            cmd = 'modhead {} SGAVER {}'.format(kdreffile, hdrver)
            _ = os.system(cmd)
            return

        if args.build_catalog:
            from legacyhalos.virgofilaments import build_catalog
            #args.ellipse = True
            #_, _, groups, _ = legacyhalos.virgofilaments.missing_files(args, sample, args.nproc)
            #if len(groups) == 0:
            #    print('No complete galaxies!')
            #    return
            build_catalog(sample, fullsample, bands=['g', 'r', 'z'], unwise=True, galex=True, 
                          nproc=args.nproc, verbose=args.verbose, refcat=refcat, clobber=args.clobber)
    
            #build_catalog(sample[groups[0]], nproc=args.nproc, verbose=args.verbose, refcat=refcat,
            #              clobber=args.clobber)
            return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:    
        suffix, groups, _, fail = legacyhalos.virgofilaments.missing_files(args, sample, size)
    else:
        groups, suffix = [], ''
    
    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        return
    else:
        print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    dsrt = np.argsort(sample[fail[rank]][DIAMCOLUMN])
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[fail[rank]][dsrt])
                    for ii, dd, diam in zip(fail[rank], np.atleast_1d(galaxydir), sample[fail[rank]][DIAMCOLUMN][dsrt]):
                        print('  {} {} (d={:.3f} arcmin)'.format(ii, dd, diam))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    print('{} todo: {} / {}'.format(suffix.upper(), len(todo), len(sample)), flush=True)
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[todo])
                    for ii, dd, diam in zip(todo, np.atleast_1d(galaxydir), sample[todo][DIAMCOLUMN]):
                        print('  {} {} (d={:.3f} arcmin)'.format(ii, dd, diam))
            return
        
    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.nproc, time.asctime()),
        flush=True)

    # The rest of the pipeline--
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))

        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN)
        survey = get_survey(run, output_dir=galaxydir)
            
        # Need the object "radius" to build the coadds.
        if onegal[DIAMCOLUMN] > 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.1 * 60 # [arcsec]
        elif onegal[DIAMCOLUMN] > 3 and onegal[DIAMCOLUMN] <= 10:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 1.5 * 60 # [arcsec]
        else:
            radius_mosaic_arcsec = onegal[DIAMCOLUMN] / 2 * 2 * 60   # [arcsec]

        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN)
        survey = get_survey(run, output_dir=galaxydir)

        if args.coadds:
            from legacyhalos.mpi import call_custom_coadds

            # Write out the individual galaxies for this mosaic.
            thissample = fullsample[np.where(onegal['GROUP_ID'] == fullsample['GROUP_ID'])[0]]
            samplefile = os.path.join(galaxydir, '{}-sample.fits'.format(galaxy))
            if args.clobber or not os.path.isfile(samplefile):
                #print('Writing {} galaxy(ies) to {}'.format(len(thissample), samplefile))
                tmpfile = samplefile+'.tmp'
                thissample.write(tmpfile, overwrite=True, format='fits')
                os.rename(tmpfile, samplefile)

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               custom=True, apodize=False, unwise=args.unwise, galex=args.galex,
                               force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                               no_galex_ceres=args.no_galex_ceres,
                               require_grz=True, debug=args.debug, logfile=logfile,
                               write_wise_psf=True)

        if args.pipeline_coadds:
            from legacyhalos.mpi import call_custom_coadds
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.
            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               custom=False, apodize=False, unwise=args.unwise, galex=args.galex,
                               force=args.force, plots=False,
                               verbose=args.verbose, cleanup=True, write_all_pickles=True,
                               just_coadds=args.just_coadds,
                               no_gaia=False, no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from legacyhalos.virgofilaments import call_ellipse
            
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir,
                         bands=['g', 'r', 'z'], refband='r',
                         pixscale=args.pixscale, nproc=args.nproc,
                         verbose=args.verbose, debug=args.debug,
                         #sky_tests=args.sky_tests,
                         write_mask=True,
                         clobber=args.clobber,
                         unwise=True, galex=True,
                         logfile=logfile)
                             
        if args.rebuild_unwise:
            from legacyhalos.virgofilaments import call_rebuild_unwise
            call_rebuild_unwise(onegal, galaxy=galaxy, galaxydir=galaxydir,
                                pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                                radius_mosaic=radius_mosaic_arcsec,
                                nproc=args.nproc, verbose=args.verbose, debug=args.debug,
                                clobber=args.clobber, logfile=logfile)
                             
        if args.htmlplots:
            from legacyhalos.mpi import call_htmlplots
            from legacyhalos.virgofilaments import read_multiband
            
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, nproc=args.nproc,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           logfile=logfile, 
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           #galaxy_id=onegal['VF_ID'],                           
                           galex=True, unwise=True,
                           get_galaxy_galaxydir=get_galaxy_galaxydir,
                           read_multiband=read_multiband)                           

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
                
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = legacyhalos.virgofilaments.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
