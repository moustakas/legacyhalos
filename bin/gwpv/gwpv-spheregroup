#!/usr/bin/env python
"""Generate a group catalog.

"""
import os, time, pdb
import numpy as np
from astropy.table import Table, Column, vstack
    
def build_group_catalog(cat, mfac=1.5, dmax=3.0/60.0):
    """dmax in degrees

    Group SGA galaxies together where their circular radii would overlap.  Use
    the catalog D25 diameters (in arcmin) multiplied by a scaling factor MFAC.
    The output catalog adds the column GROUP_ID which is unique for each group.
    The column MULT_GROUP is the multiplicity of that galaxy's group.

    """
    from pydl.pydlutils.spheregroup import spheregroup
    from astrometry.util.starutil_numpy import degrees_between

    print('Starting spheregrouping.')

    nchar = np.max([len(gg) for gg in cat['GALAXY']])+6 # add six characters for "_GROUP"
    
    t0 = time.time()
    cat.add_column(Column(name='GROUP_ID', data=np.zeros(len(cat), dtype=np.int32)-1))
    cat.add_column(Column(name='GROUP_NAME', length=len(cat), dtype='<U{}'.format(nchar)))
    cat.add_column(Column(name='GROUP_MULT', data=np.zeros(len(cat), dtype=np.int16)))
    cat.add_column(Column(name='GROUP_PRIMARY', data=np.zeros(len(cat), dtype=bool)))
    cat.add_column(Column(name='GROUP_RA', length=len(cat), dtype='f8')) # diameter-weighted center
    cat.add_column(Column(name='GROUP_DEC', length=len(cat), dtype='f8'))
    cat.add_column(Column(name='GROUP_DIAMETER', length=len(cat), dtype='f4'))

    # Initialize a unique group number for each galaxy
    gnum = np.arange(len(cat)).astype(np.int32)
    mgrp = np.ones(len(cat)).astype(np.int16)
    
    # First group galaxies within dmax arcmin, setting those to have the same
    # group number
    t0 = time.time()
    print('Spheregrouping took...', end='')
    ingroup, group_mult, firstgroup, nextgroup = spheregroup(cat['RA'], cat['DEC'], dmax)

    ngroup = np.count_nonzero(firstgroup != -1)
    for ii in np.arange(ngroup):
        #print(ii, ngroup)
        nn = group_mult[ii] # number of galaxies in this group
        if nn > 1:
            # Build INDX as the indices of all objects in this grouping
            indx = np.zeros(nn, dtype=int)
            indx[0] = firstgroup[ii]
            for jj in np.arange(nn-1):
                indx[jj+1] = nextgroup[indx[jj]]
            # Look at all pairs within this grouping to see if they should be connected.
            for jj in np.arange(nn-1):
                for kk in np.arange(jj, nn):
                    dd = degrees_between(cat['RA'][indx[jj]], cat['DEC'][indx[jj]], cat['RA'][indx[kk]], cat['DEC'][indx[kk]])
                    # If these two galaxies should be connected, make GNUM the
                    # same for them...
                    #print(dd, mfac * (cat['DIAM'][indx[jj]] / 60. + cat['DIAM'][indx[kk]] / 60.))
                    if dd < (0.5 * mfac * (cat['DIAM_INIT'][indx[jj]] / 60. + cat['DIAM_INIT'][indx[kk]] / 60.)):
                        jndx = np.where(np.logical_or(gnum[indx]==gnum[indx[jj]], gnum[indx]==gnum[indx[kk]]))[0]
                        gnum[indx[jndx]] = gnum[indx[jndx[0]]]
                        mgrp[indx[jndx]] = len(jndx)
            #print(ii, ngroup, gnum[indx], mgrp[indx])

    # Special-case the largest galaxies, looking for neighbhors
    ibig = np.where(cat['DIAM_INIT'] / 60. > dmax)[0]
    if len(ibig) > 0:
        for ii in np.arange(len(ibig)):
           dd = degrees_between(cat['RA'][ibig[ii]], cat['DEC'][ibig[ii]], cat['RA'], cat['DEC'])
           inear = np.where(dd < 0.5*(cat[ibig[ii]]['DIAM_INIT'] + cat['DIAM_INIT']) / 60.)[0]
           if len(inear) > 0:
               for jj in np.arange(len(inear)):
                  indx = np.where(np.logical_or(gnum==gnum[ibig[ii]], gnum==gnum[inear[jj]]))[0]
                  gnum[indx] = gnum[indx[0]]
                  mgrp[indx] = len(indx)
    print('...{:.3f} min'.format((time.time() - t0)/60))

    npergrp, _ = np.histogram(gnum, bins=len(gnum), range=(0, len(gnum)))

    print('Found {} total groups, including:'.format(len(set(gnum))))
    print('  {} groups with 1 member'.format(np.sum( (npergrp == 1) ).astype('int')))
    print('  {} groups with 2 members'.format(np.sum( (npergrp == 2) ).astype('int')))
    print('  {} group(s) with 3-5 members'.format(np.sum( (npergrp >= 3)*(npergrp <= 5) ).astype('int')))
    print('  {} group(s) with 6-10 members'.format(np.sum( (npergrp >= 6)*(npergrp <= 10) ).astype('int')))
    print('  {} group(s) with >10 members'.format(np.sum( (npergrp > 10) ).astype('int')))

    cat['GROUP_ID'] = gnum
    cat['GROUP_MULT'] = mgrp

    I = np.where(cat['GROUP_MULT'] == 1)[0]
    if len(I) > 0:
        cat['GROUP_RA'][I] = cat['RA'][I]
        cat['GROUP_DEC'][I] = cat['DEC'][I]
        cat['GROUP_DIAMETER'][I] = cat['DIAM_INIT'][I]
        cat['GROUP_NAME'][I] = cat['GALAXY'][I]
        cat['GROUP_PRIMARY'][I] = True

    more = np.where(cat['GROUP_MULT'] > 1)[0]
    for group in set(cat['GROUP_ID'][more]):
        I = np.where(cat['GROUP_ID'] == group)[0]
        # Compute the DIAM-weighted RA, Dec of the group:
        weight = cat[I]['DIAM_INIT']
        cat['GROUP_RA'][I] = np.sum(weight * cat[I]['RA']) / np.sum(weight)
        cat['GROUP_DEC'][I] = np.sum(weight * cat[I]['DEC']) / np.sum(weight)
        # Get the diameter of the group as the distance between the center of
        # the group and the outermost galaxy (plus the diameter of that galaxy,
        # in case it's a big one!).
        dd = degrees_between(cat['RA'][I], cat['DEC'][I], cat['GROUP_RA'][I[0]], cat['GROUP_DEC'][I[0]])
        pad = dd + cat['DIAM_INIT'][I] / 60.0
        gdiam = 2 * np.max(pad) * 60 # [arcmin]
        # cap the maximum size of the group
        if gdiam > 15.:# and len(I) <= 2:
            gdiam = 1.1 * np.max(pad) * 60 # [arcmin]
        cat['GROUP_DIAMETER'][I] = gdiam
        if cat['GROUP_DIAMETER'][I[0]] < np.max(cat['DIAM_INIT'][I]):
            print('Should not happen!')
            raise ValueError

        # Assign the group name based on its largest member and also make this
        # galaxy "primary".
        primary = np.argmax(cat['DIAM_INIT'][I])
        cat['GROUP_NAME'][I] = '{}_GROUP'.format(cat['GALAXY'][I][primary])
        cat['GROUP_PRIMARY'][I[primary]] = True

        #if cat['GROUP_ID'][I][0] == 2708:
        #    pdb.set_trace()
        
    print(f'Building a group catalog took {(time.time() - t0)/60.:.3f} min')
        
    return cat

def qa(version='v1'):
    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set(context='talk', style='ticks', font_scale=1.2)

    fig, ax = plt.subplots(2, 2, figsize=(13, 10))
    ax[0, 0].scatter(cat['RA'][m1], cat['DEC'][m1], s=5)
    ax[0, 0].scatter(cat['RA'][miss], cat['DEC'][miss], s=5)
    ax[0, 0].set_xlim(290, 90)
    ax[0, 0].set_xlabel('RA')
    ax[0, 0].set_ylabel('Dec')

    ax[0, 1].hist(cat['RADIUS'][m1]*2/60, bins=50, range=(0, 8),
                  label='SGA-match (N={})'.format(len(m1)))
    ax[0, 1].hist(cat['RADIUS'][miss]*2/60, bins=50, range=(0, 8), alpha=0.5,
                  label='SGA-no match (N={})'.format(len(miss)))
    ax[0, 1].set_yscale('log')
    ax[0, 1].set_xlabel('log Radius (arcmin)')
    ax[0, 1].set_ylabel('Number of Galaxies')
    ax[0, 1].legend(loc='upper right', fontsize=14)

    ax[1, 0].scatter(sga['DIAM_INIT'][m2], cat['RADIUS'][m1]*2/60, s=5)
    ax[1, 0].set_xlabel('SGA Diameter [arcmin]')
    ax[1, 0].set_ylabel('Input Diameter [arcmin]')

    ax[1, 1].axis('off')

    fig.subplots_adjust(left=0.1, bottom=0.15, right=0.98, hspace=0.25, wspace=0.2)
    fig.savefig(os.path.join(homedir, 'qa-virgofilaments-{}-SGA.png'.format(version)))

def main():

    import fitsio
    from astrometry.libkd.spherematch import match_radec
    import legacyhalos.io

    #samplefile = os.path.join(legacyhalos.io.legacyhalos_dir(), 'pv_group_candidates.csv')
    #samplefile = os.path.join(legacyhalos.io.legacyhalos_dir(), 'pv_group_candidates.fits')
    groupfile = os.path.join(legacyhalos.io.legacyhalos_dir(), 'gwpv-groups.fits')

    cat1 = Table.read(os.path.join(legacyhalos.io.legacyhalos_dir(), 'pv_group_candidates_v2.csv'))
    cat2 = Table.read(os.path.join(legacyhalos.io.legacyhalos_dir(), 'pv_group_candidates_v2b.csv'))
    cat2['PVID'] += 5000

    cat = vstack((cat1, cat2))
    cat['BA'] = 1.
    cat['PA'] = 0.

    #cat = Table.read(samplefile)
    #cat = Table(fitsio.read(samplefile, upper=True))
    #print(f'Read {len(cat)} objects from {samplefile}')

    #cat['PVID'] = cat['PVID'].astype(np.int16)
    cat['DIAM_INIT'] = cat['DIAMETER'] / 60. # [arcmin]
    cat.remove_column('DIAMETER')
    cat.rename_column('PA', 'PA_INIT')
    cat.rename_column('BA', 'BA_INIT')
    cat['DIAM_INIT'] = cat['DIAM_INIT'].astype('f4')
    cat['PA_INIT'] = cat['PA_INIT'].astype('f4')
    cat['BA_INIT'] = cat['BA_INIT'].astype('f4')
    #cat['GALAXY'] = cat['TARGETID'].astype(str)
    cat['GALAXY'] = [f'{pvid:05d}' for pvid in cat['PVID']]

    out = build_group_catalog(cat)
    print(f'Writing {groupfile}')
    out.write(groupfile, overwrite=True)

if __name__ == '__main__':
    main()

