#!/usr/bin/env python
"""MPI wrapper for the MaNGA project.

manga-mpi --coadds

salloc -N 4 -C cpu -A m3592 -t 04:00:00 --qos interactive --image=legacysurvey/legacyhalos:v1.6
sh /global/cfs/cdirs/desi/users/ioannis/legacyhalos/manga/manga-mpi.sh 4 32 resampled > manga-mpi-resampled-21830623.log 2>&1 &

"""
import os, time, pdb
import numpy as np
from astropy.table import Table

#   PLATEIFU    IFURA     IFUDEC     MANGANUM
# ----------- --------- ---------- -----------
# 10506-12702 139.48427   34.50929 10506012702 - missing Tractor/ellipse
#  10504-9102 139.48431  34.509323 10504009102
# 10843-12704 149.70772 0.83665769 10843012704 - missing Tractor/ellipse
#  11866-9101 149.70772 0.83665771 11866009101
#   7443-1901 231.04261  42.068721  7443001901 - missing Tractor/ellipse
#   9872-1901 231.04264  42.068723  9872001901
#   7443-3701 230.57438   42.28702  7443003701 - missing Tractor/ellipse
#   9872-3702 230.57439  42.287013  9872003702
#  7495-12704  205.4384  27.004754  7495012704 - missing Tractor/ellipse
#   8983-3703 205.43841  27.004738  8983003703
#   7963-3701 313.57074 -1.2491752  7963003701 - missing Tractor/ellipse
#   8651-3701 313.57074 -1.2491752  8651003701    
#  8567-12702 118.53567   48.70984  8567012702 - missing Tractor/ellipse
#   8239-6104  118.5407  48.708898  8239006104
#   8329-3701 213.43219  43.662481  8329003701 - missing Tractor/ellipse
#  8333-12701 213.43219  43.662481  8333012701
#   8588-3701 248.14056  39.131021  8588003701 - missing Tractor/ellipse
#  8603-12701 248.14056  39.131021  8603012701
#   9046-6104 246.17117   25.32936  9046006104 - missing Tractor/ellipse
#   9048-3703 246.17224  25.328235  9048003703

CLOSE_DUPLICATES = np.array([
    10506012702,
    10843012704,
    7443001901,
    7443003701,
    7495012704,
    7963003701,
    8567012702,
    8329003701,
    8588003701,
    9046006104])

def main():
    """Top-level wrapper.

    """
    import legacyhalos.io
    import legacyhalos.manga

    from legacypipe.runs import get_survey
    from legacyhalos.manga import ZCOLUMN, RACOLUMN, DECCOLUMN, GALAXYCOLUMN, RADIUSFACTOR, MANGA_RADIUS, REFIDCOLUMN
    from legacyhalos.manga import get_galaxy_galaxydir
    
    basedir = legacyhalos.io.legacyhalos_dir()
    datadir = legacyhalos.io.legacyhalos_data_dir()
    htmldir = legacyhalos.io.legacyhalos_html_dir()
    
    args = legacyhalos.manga.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sample = None
    if rank == 0:
        print('$LEGACYHALOS_DIR={}'.format(basedir))
        print('$LEGACYHALOS_DATA_DIR={}'.format(datadir))
        print('$LEGACYHALOS_HTML_DIR={}'.format(htmldir))

        if args.build_refcat:
            use_testbed = False
        else:
            use_testbed = False

        if args.build_catalog:
            fullsample = True
        else:
            fullsample = False
            
        sample = legacyhalos.manga.read_sample(first=args.first, last=args.last,
                                               galaxylist=args.galaxylist,
                                               verbose=args.verbose,
                                               use_testbed=use_testbed,
                                               ellipse=args.ellipse,
                                               resampled_phot=args.resampled_phot,
                                               htmlplots=args.htmlplots,
                                               fullsample=fullsample)

        if len(sample) == 0:
            return

    if comm:
        sample = comm.bcast(sample, root=0)

    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if rank == 0:
        refcat = 'R1'       
        if args.build_refcat:
            # Build a reference catalog for use with the pipeline.
            import fitsio

            def _write_refcat(sample, reffile):
                """Simple wrapper to write the reference catalog."""
                ngal = len(sample)
    
                ref = Table()
                ref['ra'] = sample[RACOLUMN]
                ref['dec'] = sample[DECCOLUMN]
                ref['sga_id'] = sample[REFIDCOLUMN]
    
                ref['mag_leda'] = np.repeat(15.0, len(sample)).astype('f4')
                ref['ba'] = np.repeat(1.0, ngal).astype('f4') # fixed b/a (circular)
                ref['pa'] = np.repeat(0.0, ngal).astype('f4') # fixed position angle
                ref['diam'] = np.repeat(2 * MANGA_RADIUS / 60.0, ngal).astype('f4') # fixed diameter [arcmin]
                
                igood = np.where((sample['NSA_NSAID'] != -9999) * (sample['NSA_NSAID'] > 0))[0]
                ref['ba'][igood] = sample['NSA_SERSIC_BA'][igood]
                ref['pa'][igood] = sample['NSA_SERSIC_PHI'][igood]
                ref['diam'][igood] = 2 * 2 * sample['NSA_SERSIC_TH50'][igood] / 60 # [2*half-light radius, arcmin]
                ref['mag_leda'][igood] = 22.5-2.5*np.log10(sample['NSA_SERSIC_FLUX'][igood, 4]) # r-band
    
                # hack! adjust the initial coordinates of 8158-3702, otherwise Tractor drops it
                # https://www.legacysurvey.org/viewer-dev/?ra=61.119133&dec=-5.165784&zoom=16&layer=ls-dr9&manga&sources-dr9
                # https://www.legacysurvey.org/viewer-dev/ls-dr9/cat?ralo=61.11790011072988&rahi=61.11990011072987&declo=-5.1662860524869085&dechi=-5.164286052486908&objid=4053
                fix = np.where(ref['sga_id'] == 8158003702)[0]
                if len(fix) > 0:
                    ref['ra'][fix] = 61.118900110729875
                    ref['dec'][fix] = -5.165286052486908
    
                kdreffile = reffile.replace('.fits', '.kd.fits')
                print('Writing {} galaxies to {}'.format(ngal, reffile))
                
                hdr = fitsio.FITSHDR()
                hdrver = refcat
                hdr['SGAVER'] = hdrver
                fitsio.write(reffile, ref.as_array(), header=hdr, clobber=True)
    
                print('Writing {}'.format(kdreffile))
                cmd = 'startree -i {} -o {} -T -P -k -n stars'.format(reffile, kdreffile)
                print(cmd)
                _ = os.system(cmd)
    
                cmd = 'modhead {} SGAVER {}'.format(kdreffile, hdrver)
                _ = os.system(cmd)

            # Need to handle duplicates by creating an ad hoc reference catalog
            # which we will swap in as-needed.

            sample_main = sample[~np.isin(sample[REFIDCOLUMN], CLOSE_DUPLICATES)]
            sample_supp = sample[np.isin(sample[REFIDCOLUMN], CLOSE_DUPLICATES)]
            
            reffile_main = os.path.join(basedir, 'manga-refcat.fits')
            _write_refcat(sample_main, reffile_main)

            reffile_supp = os.path.join(basedir, 'manga-refcat-supp.fits')
            _write_refcat(sample_supp, reffile_supp)
            
            return

        if args.htmlindex:
            legacyhalos.manga.make_html(sample, survey=None, pixscale=args.pixscale,
                                        racolumn=RACOLUMN, deccolumn=DECCOLUMN, #diamcolumn=DIAMCOLUMN,
                                        zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                        makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                        ccdqa=args.ccdqa, args=args)
            return

        if args.build_catalog:
            from legacyhalos.manga import build_catalog
            args.custom_coadds = True
            _, _, groups, _ = legacyhalos.manga.missing_files(args, sample, args.nproc)

            if len(groups) == 0:
                print('No complete galaxies!')
                return
            build_catalog(sample[groups[0]], nproc=args.nproc, verbose=args.verbose,
                          refcat=refcat, resampled=args.resampled_phot, clobber=args.clobber)
            return

    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:
        suffix, groups, _, fail = legacyhalos.manga.missing_files(args, sample, size)
    else:
        groups, suffix = [], ''

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        return
    else:
        print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[fail[rank]])
                    for ii, dd in zip(fail[rank], np.atleast_1d(galaxydir)):
                        print('  {} {}'.format(ii, dd))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    #print('Galaxies left to do:')
                    galaxy, galaxydir = get_galaxy_galaxydir(sample[todo])
                    for ii, dd in zip(todo, np.atleast_1d(galaxydir)):
                        print('  {} {}'.format(ii, dd))
            return

    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.nproc, time.asctime()),
        flush=True)
    
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = get_galaxy_galaxydir(onegal, resampled=args.resampled_phot)
        if not os.path.isdir(galaxydir):
            if args.resampled_phot:
                print('No resampled photometry found for {}; skipping'.format(galaxy))
            else:
                os.makedirs(galaxydir, exist_ok=True)

        # deal with the "duplicates"
        if onegal[REFIDCOLUMN] in CLOSE_DUPLICATES:
            os.environ['LARGEGALAXIES_CAT'] = os.environ.get('LARGEGALAXIES_CAT_SUPP')
        else:
            os.environ['LARGEGALAXIES_CAT'] = os.environ.get('LARGEGALAXIES_CAT_DEFAULT')

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
        
        # Need the object "radius" to build the coadds.
        radius_mosaic_arcsec = MANGA_RADIUS * RADIUSFACTOR # [arcsec]

        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN)
        survey = get_survey(run, output_dir=galaxydir)

        if args.coadds:
            from legacyhalos.mpi import call_custom_coadds

            # Write out the individual galaxies for this mosaic.
            samplefile = os.path.join(galaxydir, '{}-sample.fits'.format(galaxy))
            if args.clobber or not os.path.isfile(samplefile):
                #print('Writing {} galaxy(ies) to {}'.format(len(thissample), samplefile))
                tmpfile = samplefile+'.tmp'
                Table(onegal).write(tmpfile, overwrite=True, format='fits')
                os.rename(tmpfile, samplefile)

            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               custom=True,
                               apodize=False, unwise=True, galex=True, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                               require_grz=True, debug=args.debug, logfile=logfile,
                               write_wise_psf=True)

        if args.pipeline_coadds:
            from legacyhalos.mpi import call_custom_coadds
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.
            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               custom=False,
                               apodize=False, unwise=False, galex=True, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=args.cleanup, write_all_pickles=True,
                               just_coadds=args.just_coadds,
                               no_gaia=False, no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from legacyhalos.manga import call_ellipse
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir,
                         bands=['g', 'r', 'z'], refband='r',                         
                         pixscale=args.pixscale, nproc=args.nproc,
                         verbose=args.verbose, debug=args.debug,
                         clobber=args.clobber,
                         unwise=True, galex=True,
                         logfile=logfile)
                             
        if args.resampled_phot:
            _, orig_galaxydir, htmlgalaxydir = get_galaxy_galaxydir(onegal, html=True)
            if args.htmlplots:
                from legacyhalos.manga import call_htmlplots_resampled_phot
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.resampled_pixscale).astype(int) # [pixels]
                call_htmlplots_resampled_phot(onegal, galaxy=galaxy, galaxydir=galaxydir, orig_galaxydir=orig_galaxydir,
                                              htmlgalaxydir=htmlgalaxydir, 
                                              resampled_pixscale=args.resampled_pixscale,
                                              verbose=args.verbose, debug=args.debug,
                                              barlen=barlen, barlabel=barlabel, 
                                              clobber=args.clobber, logfile=logfile)
            else:
                rgal, resampleddir = get_galaxy_galaxydir(onegal, resampled=True)
                checkfile = os.path.join(resampleddir, f'resampled-{rgal}-r.fits')
                if not os.path.isfile(checkfile):
                    print(f'Missing {checkfile}; skipping')
                    continue
                from legacyhalos.manga import call_resampled_phot
                call_resampled_phot(onegal, galaxy=galaxy, galaxydir=galaxydir, orig_galaxydir=orig_galaxydir,
                                    resampled_pixscale=args.resampled_pixscale,
                                    nproc=args.nproc, verbose=args.verbose, debug=args.debug,
                                    clobber=args.clobber, logfile=logfile)
                             
        if args.htmlplots and args.resampled_phot is False:
            from legacyhalos.mpi import call_htmlplots
            from legacyhalos.manga import read_multiband
            
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, nproc=args.nproc,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           logfile=logfile, 
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           #galaxy_id=onegal['VF_ID'],                           
                           galex=True, unwise=True,
                           get_galaxy_galaxydir=get_galaxy_galaxydir,
                           read_multiband=read_multiband)                           

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
                
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = legacyhalos.manga.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
